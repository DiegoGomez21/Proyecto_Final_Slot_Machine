return(c(e_v, list(p1)))
}
jugadas = play_equi_p(rolls = 50000,n_carril = 3)
graficar_experimento(jugadas)
library(ggplot2)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
# Devolver la lista de gr?ficos
return(c(e_v, list(p1)))
}
jugadas = play_equi_p(rolls = 50000,n_carril = 3)
graficar_experimento(jugadas)
jugadas = play_equi_p(rolls = 50000,n_carril = 5)
graficar_experimento(jugadas)
jugadas = play_equi_p(rolls = 50000,n_carril = 7)
graficar_experimento(jugadas)
library(ggplot2)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
# Devolver la lista de gr?ficos
return(c(e_v, list(p1)))
}
jugadas_3 = play_equi_p(rolls = 50000,n_carril = 3)
graficar_experimento(jugadas_3)
jugadas_5 = play_equi_p(rolls = 50000,n_carril = 5)
graficar_experimento(jugadas_5)
jugadas_7 = play_equi_p(rolls = 50000,n_carril = 7)
graficar_experimento(jugadas_7)
library(ggplot2)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
# Devolver la lista de gr?ficos
return(c(e_v, list(p1)))
}
jugadas_3 = play_equi_p(rolls = 100000,n_carril = 3)
graficar_experimento(jugadas_3)
jugadas_5 = play_equi_p(rolls = 100000,n_carril = 5)
graficar_experimento(jugadas_5)
jugadas_7 = play_equi_p(rolls = 100000,n_carril = 7)
graficar_experimento(jugadas_7)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, coste_tiro = coste)
prize <- function(entrada){
resultado = table(entrada)
maximo = max(as.vector(resultado))
if ((maximo == length(entrada)) || (maximo > length(entrada)/2 && maximo > 2)){
switch (names(resultado[match(maximo, resultado)]),
"L" = return(round(as.vector(resultado["L"])*(10/length(entrada)), digits = 0             )),
"U" = return(round(as.vector(resultado["U"])*(15/length(entrada)), digits = 0             )),
"N" = return(round(as.vector(resultado["N"])*(20/length(entrada)), digits = 0             )),
"S" = return(round(as.vector(resultado["S"])*(25/length(entrada)), digits = 0             )),
"BN" = return(round(as.vector(resultado["BN"])*(30/length(entrada)), digits =              0)),
"CP" = return(round(as.vector(resultado["CP"])*(40/length(entrada)), digits =              0)),
"SVN" = return(round(as.vector(resultado["SVN"])*(60/length(entrada)), digits             = 0)),
"BAR" = return(round(as.vector(resultado["BAR"])*(100/length(entrada)),                    digits = 0))
)
}else if(!is.na(resultado["CZ"])){
return(round(as.vector(resultado["CZ"])*(5/length(entrada)), digits = 0))
}else{
return(0)
}
}
play_equi_p <- function(rolls, n_carril, costo_tiro){
result=c()
for (i in 1:rolls) {
result = append(result,prize(get_symbols_equi_p(n_carril))-costo_tiro)
}
return(result)
}
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, coste_tiro = coste)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas)+ gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
r = 10
c = 3
coste = 5
jugadas = play_equi_p(rolls = r,n_carril = c, costo_tiro = coste)
print(jugadas)
ganancias = sum(jugadas) + gastos
print(ganancias)
gastos = coste*r
print(gastos)
total = ganancias-gastos
print(total)
library(ggplot2)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
# Devolver la lista de gr?ficos
return(c(e_v, list(p1)))
}
jugadas_3 = play_equi_p(rolls = 100000,n_carril = 3, costo_tiro = 5)
graficar_experimento(jugadas_3)
jugadas_5 = play_equi_p(rolls = 100000,n_carril = 5, costo_tiro = 5)
graficar_experimento(jugadas_5)
jugadas_7 = play_equi_p(rolls = 100000,n_carril = 7, costo_tiro = 5)
graficar_experimento(jugadas_7)
library(ggplot2)
equiprobables <- c(1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9)
get_symbols_equi_p <- function(n_carril,prob) {
wheel <- c("CZ","L","U", "N", "S", "B", "CP", "SVN", "BAR")
sample(wheel, size = n_carril, replace = TRUE,
prob = equiprobables)
}
get_symbols(3,equiprobables)
get_symbols<- function(n_carril,prob) {
wheel <- c("CZ","L","U", "N", "S", "B", "CP", "SVN", "BAR")
sample(wheel, size = n_carril, replace = TRUE,
prob = prob)
}
get_symbols(3,equiprobables)
get_symbols(3,equiprobables)
get_symbols(3,equiprobables)
get_symbols(3,equiprobables)
wheel <- c("CZ","L","U", "N", "S", "B", "CP", "SVN", "BAR")
equiprobables <- c(1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9)
no_equiprobables_1 <- c()
no_equiprobables_2 <- c()
get_symbols<- function(n_carril,prob) {
sample(wheel, size = n_carril, replace = TRUE,
prob = prob)
}
get_symbols(3,equiprobables)
get_symbols(3,equiprobables)
get_symbols(3,equiprobables)
wheel <- c("CZ","L","U", "N", "S", "B", "CP", "SVN", "BAR")
equiprobables <- c(1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9)
no_equiprobables_1 <- c(0.228, 0.196, 0.160, 0.128, 0.105, 0.073, 0.055, 0.037, 0.018)
no_equiprobables_2 <- c(0.203, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.084, 0.071)
play <- function(rolls, n_carril, costo_tiro, prob){
result=c()
for (i in 1:rolls) {
result = append(result,prize(get_symbols(n_carril,prob))-costo_tiro)
}
return(result)
}
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = no_equiprobables_2) graficar_experimento(jugadas_5)
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = no_equiprobables_2) graficar_experimento(jugadas_5)
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_7)
install_tinytex()
tinytex::install_tinytex()
library(ggplot2)
wheel <- c("CZ","L","U", "N", "S", "B", "CP", "SVN", "BAR")
equiprobables <- c(1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9)
no_equiprobables_1 <- c(0.228, 0.196, 0.160, 0.128, 0.105, 0.073, 0.055, 0.037, 0.018)
no_equiprobables_2 <- c(0.203, 0.107, 0.107, 0.107, 0.107, 0.107, 0.107, 0.084, 0.071)
get_symbols<- function(n_carril,prob) {
sample(wheel, size = n_carril, replace = TRUE,
prob = prob)
}
get_symbols(3,equiprobables)
prize <- function(entrada){
resultado = table(entrada)
maximo = max(as.vector(resultado))
if ((maximo == length(entrada)) || (maximo > length(entrada)/2 && maximo > 2)){
switch (names(resultado[match(maximo, resultado)]),
"L" = return(round(as.vector(resultado["L"])*(10/length(entrada)), digits = 0             )),
"U" = return(round(as.vector(resultado["U"])*(15/length(entrada)), digits = 0             )),
"N" = return(round(as.vector(resultado["N"])*(20/length(entrada)), digits = 0             )),
"S" = return(round(as.vector(resultado["S"])*(25/length(entrada)), digits = 0             )),
"BN" = return(round(as.vector(resultado["BN"])*(30/length(entrada)), digits =              0)),
"CP" = return(round(as.vector(resultado["CP"])*(40/length(entrada)), digits =              0)),
"SVN" = return(round(as.vector(resultado["SVN"])*(60/length(entrada)), digits             = 0)),
"BAR" = return(round(as.vector(resultado["BAR"])*(100/length(entrada)),                    digits = 0))
)
}else if(!is.na(resultado["CZ"])){
return(round(as.vector(resultado["CZ"])*(5/length(entrada)), digits = 0))
}else{
return(0)
}
}
play <- function(rolls, n_carril, costo_tiro, prob){
result=c()
for (i in 1:rolls) {
result = append(result,prize(get_symbols(n_carril,prob))-costo_tiro)
}
return(result)
}
r = 10
c = 3
coste = 5
jugadas = play(rolls = r,n_carril = c, costo_tiro = coste, prob = equiprobables)
print(jugadas)
gastos = coste*r
ganancias = sum(jugadas) + gastos
print(ganancias)
print(gastos)
total = ganancias-gastos
print(total)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
# Devolver la lista de gr?ficos
return(c(e_v, list(p1)))
}
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_7)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
simu = data.frame(n = 1:length(results), Sn = Sn)
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
return(c(e_v, list(p1)))
}
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_7)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
# Devolver la lista de gr?ficos
return(c(e_v, list(p1)))
}
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn)) +
geom_line() +
ylab("Average Value (Sn/n)") +
ggtitle(title1)
# Devolver la lista de gr?ficos
return(c(e_v, list(p1)))
}
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_7)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line(color = "blue") +
geom_hline(yintercept = e_v, linetype = "dashed", color = "red") +
labs(
x = "Number of Trials",
y = "Average Value (Sn/n)",
title = title1,
subtitle = sprintf("Last 1000 trials average: %.2f", e_v)
) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8),
legend.position = "none")
# Devolver la lista de gráficos
return(c(e_v, list(p1)))
}
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line(color = "blue") +
geom_hline(yintercept = e_v, linetype = "dashed", color = "red") +
labs(
x = "Number of Trials",
y = "Average Value (Sn/n)",
title = title1,
subtitle = sprintf("Last 1000 trials average: %.2f", e_v)
) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8),
legend.position = "none")
# Devolver la lista de gráficos
return(c(e_v, list(p1)))
}
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_3)
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_7)
graficar_experimento <- function(results, title1 = "Average Value: Slot Machine") {
# Calcula la suma acumulada de los resultados
Sn = cumsum(results)
e_v = mean(Sn[(length(Sn) - 1000):length(Sn)])/length(Sn)
# Crea un data frame con los resultados
simu = data.frame(n = 1:length(results), Sn = Sn)
# Grafica principal
p1 = ggplot(data = simu, aes(x = n, y = Sn/n)) +
geom_line(color = "blue") +
geom_hline(yintercept = e_v, linetype = "dashed", color = "red") +
labs(
x = "Number of Trials",
y = "Average Value (Sn/n)",
title = title1,
subtitle = sprintf("Last 100000 trials average: %.2f", e_v)
) +
theme_minimal() +
theme(plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title = element_text(size = 10),
axis.text = element_text(size = 8),
legend.position = "none")
# Devolver la lista de gráficos
return(c(e_v, list(p1)))
}
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_7)
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = equiprobables)
graficar_experimento(jugadas_7)
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = no_equiprobables_1)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = no_equiprobables_1)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = no_equiprobables_1)
graficar_experimento(jugadas_7)
r = 100000
jugadas_3 = play(rolls = r,n_carril = 3, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_3)
jugadas_5 = play(rolls = r,n_carril = 5, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_5)
jugadas_7 = play(rolls = r,n_carril = 7, costo_tiro = 5, prob = no_equiprobables_2)
graficar_experimento(jugadas_7)
